# -*- coding: utf-8 -*-
"""MACHINE LEARNING LINEAR REGRESSION NASSCOM MINI PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17bbvgKvhbEFWo1rrpjvTrBhPTs5FbHAa

#**Introduction:**

Cardiovascular diseases (CVDs) are the number 1 cause of death globally, taking an estimated 17.9 million lives each year, which accounts for 31% of all deaths worldwide. Four out of 5CVD deaths are due to heart attacks and strokes, and one-third of these deaths occur prematurely in people under 70 years of age. Heart failure is a common event caused by CVDs and this dataset contains 11 features that can be used to predict a possible heart disease.

People with cardiovascular disease or who are at high cardiovascular risk (due to the presence of one or more risk factors such as hypertension, diabetes, hyperlipidaemia or already established disease) need early detection and management wherein a machine learning model can be of great help

#Columns Info:
1.Age: age of the patient [years]

2.Sex: sex of the patient [M: Male, F: Female]

3.ChestPainType: chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic]

4.RestingBP: resting blood pressure [mm Hg]

5.Cholesterol: serum cholesterol [mm/dl]

6.FastingBS: fasting blood sugar [1: if FastingBS > 120 mg/dl, 0: otherwise]

7.RestingECG: resting electrocardiogram results [Normal: Normal, ST: having ST-T wave abnormality (T wave inversions and/or ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]

8.MaxHR: maximum heart rate achieved [Numeric value between 60 and 202]

9.ExerciseAngina: exercise-induced angina [Y: Yes, N: No]

10.Oldpeak: oldpeak = ST [Numeric value measured in depression]

11.Smoking: whether the person is smoking or not [1 for Yes and 0 for No]
STSlope: the slope of the peak exercise ST segment [Up: upsloping, Flat: flat, Down: downsloping]

12.HeartDisease: output class [1: heart disease, 0: Normal]


**Final dataset: 927 observations**

#**Aim**:
To predict whether the person has Heart Disease or not.

So,Let's get started!

#**Libraries Involved:**

- Pandas

- Matplotlib

- Seaborn

- Sklearn

- Numpy

**IMPORTING DATASET:**

First let's upload the target csv file.

let's import the dataset using pandas library and print it accordingly.
"""

from google.colab import files as f
f.upload()

import pandas as pd
df = pd.read_csv("Heart.csv")
df

"""#**KNOWING ABOUT DATASET**
Now we explore the dataset for better understanding the data for further steps.

Describing data gives the statistic attributes.
"""

df.describe()

"""Info tells us brief like column names,type of values,null or not and also range."""

df.info()

"""Here is the total count of rows and columns"""

row_count = df.shape[0]
column_count = df.shape[1]
print("There are {} rows and {} columns in the dataset.".format(row_count,column_count))

"""Now let's print(first five rows)"""

df.head()

"""Now print(last five rows)"""

df.tail()

"""FILTERING DATASET

First step of filtering is dropping NaN values from the dataset so that we get clarity on the dataset to perfrm required operations.
"""

df.dropna()
if df.shape[0]==row_count and df.shape[1]==column_count:
  print("There are no NaN values")
else:
  print("NaN values are dropped successfully!")

"""Visualizing HeartDisease with Age and Cholesterol."""

import seaborn as sb
import matplotlib.pyplot as plt
sb.lineplot(x="Cholesterol",y="Age",data=df,hue="HeartDisease")
plt.title("Heart Disease")
plt.legend(labels=["No","Yes"])

"""Let's know male count and female count"""

sb.countplot(x="Sex",data=df)

"""Heat Map for relationship between data."""

data = df.corr()
sb.heatmap(data,cmap=None)

"""Let's print all the data in one graph using pairplot from seaborn.


"""

sb.pairplot(df,diag_kind="kde",hue="HeartDisease")

fig=plt.figure(figsize=(11,6))
sb.countplot(x='Sex',hue='HeartDisease',data=df)

fig=plt.figure(figsize=(11,6))
sb.kdeplot(df['Age'],hue = df['HeartDisease'])

sb.jointplot(x="MaxHR",y="RestingBP",data=df)

sb.scatterplot(x="MaxHR",y="RestingBP",data=df)

sb.lmplot(x="MaxHR",y="Age",data=df)

"""#**SHAPING DATASET**:
columns that have categorical variables are Sex, ChestPainType, RestingECG, ExerciseAngina, STSlope.

Replacing all categorical variables with numbers for performing Linear Regression.
"""

df["Sex"].replace("F",0,inplace=True)
df["Sex"].replace("M",1,inplace=True)
df["STSlope"].replace("Up",0,inplace=True)
df["STSlope"].replace("Flat",1,inplace=True)
df["STSlope"].replace("Down",2,inplace=True)
df["ExerciseAngina"].replace("N",0,inplace=True)
df["ExerciseAngina"].replace("Y",1,inplace=True)

df["ChestPainType"].replace("ATA",0,inplace=True)
df["ChestPainType"].replace("NAP",1,inplace=True)
df["ChestPainType"].replace("ASY",2,inplace=True)
df["ChestPainType"].replace("TA",3,inplace=True)
df["RestingECG"].replace("Normal",0,inplace=True)
df["RestingECG"].replace("ST",1,inplace=True)
df["RestingECG"].replace("LVH",2,inplace=True)

"""#Previewing the data after replacement with numbers."""

df.head(20)

df.tail(10)

"""#**SPLITING DATASET INTO TRAINING DATA AND TESTING DATA**:

Before building any model we must split the dataset into training and testing data.

training data is used to train the model.

and testing data is used to predict the model after it is trained.
"""

X = df.iloc[:,:-1]
Y = df.iloc[:,-1]

from sklearn.model_selection import train_test_split as tts
trainX,testX,trainY,testY = tts(X,Y,train_size=0.8,random_state=0)

"""#**Building Linear Regression Model**
Libraries we need to build Linear Regression model is sklearn.
"""

from sklearn.linear_model import LinearRegression as LR
model = LR().fit(trainX,trainY)

"""#**PRECDICTING MODEL**

So,now building model is completed.

let's predict the model with the testing data which is 20% from the actual data.
"""

Pred = model.predict(testX)
Pred = Pred.round()
sb.distplot(Pred)

"""#**Predicting Heart Disease with user input**

###**Here iam going to enter the values for prediction from user input.**
**The values are :**

- Age : 37
- Sex : M
- ChestPainType : ATA
- RestingBP : 130
- Cholesterol : 283
- FastingBS : 0
- RestingECG : ST
- MaxHR : 98
- ExerciseAngina : N(which means No)
- Oldpeak : 0.0
- STSlope : Up
- Smoking : Y(which means Yes)
"""

from google.colab import output
import time

Age = int(input("Enter Age  :"))
Sex = input("Enter your Gender as M or F :")
CPT = input("Enter chest pain type as ATA or NAP or ASY or TA :")
RBP = int(input("Enter Resting Blood Pressure rate :"))
Chol = int(input("Enter Cholesterol rate :"))
FBS = int(input("Enter FastingBS : "))
REC = input("Enter RestingECG as Normal or ST or LVG :")
MHR = int(input("Enter Maximum Heart Rate :"))
EA = input("Enter ExerciseAngina as Y or N :")
OP = float(input("Enter Oldpeak value :"))
STS = input("Enter ST Slope type as Up or Flat or Down : ")
SMOKE = input("Enter Smoking Status as Y or N : ")
if Sex=="M":
  Sex=1
elif Sex=="F":
  Sex=0
if CPT=="ATA":
  CPT=0
elif CPT=="NAP":
  CPT=1
elif CPT=="ASY":
  CPT=2
elif CPT=="TA":
  CPT=3
else:
  print("ERROR FROM CPT")
if REC=="Normal":
  REC=0
elif REC=="ST":
  REC=1
elif REC=="LVH":
  REC=2
if EA == "Y":
  EA=1
elif EA=="N":
  EA=0
if STS=="Up":
  STS=0
elif STS=="Flat":
  STS=1
elif STS=="Down":
  STS=2
if SMOKE=="Y":
  SMOKE=1
elif SMOKE=="N":
  SMOKE=0

time.sleep(1)
output.clear()

UI = model.predict([[Age,Sex,CPT,RBP,Chol,FBS,REC,MHR,EA,OP,STS,SMOKE]]).round()
if UI[0]==0:
  print("The person doesn't have Heart Disease")
elif UI[0]==1:
  print("The person have Heart Disease")

"""#Here you we can see that the prediction goes perfect and matches with data we have in testing data."""

df.head(5)

"""#**Comparing test data with predicted data**"""

preddf = {'Expected': testY, 'Got': Pred}
preddf = pd.DataFrame(data=preddf)
preddf.head()

"""#**Evaluating Model:**

#Now here we can check how accurate the model is :
"""

import numpy as np
from sklearn import metrics
from sklearn.metrics import r2_score, mean_squared_error,accuracy_score
pred_y = model.predict(testX)
print('R2 Score = ',metrics.r2_score(testY,pred_y))
print('RMSE = ', np.sqrt(mean_squared_error(testY,pred_y)))
print('Accuracy score = ',metrics.accuracy_score(testY,pred_y.round()))

cm=metrics.confusion_matrix(testY, Pred, labels=[0, 1])
df_cm = pd.DataFrame(cm, index = [i for i in ["No","Yes"]],columns = [i for i in ["No","Yes"]])
plt.figure(figsize = (7,5))
sb.heatmap(df_cm, annot=True,fmt='g')

"""##**The confusion matrix :**

### No, No = True Positives (TP): We correctly predicted that they do not have Heart Disease 100.

#### Yes, Yes = True Negatives (TN): We correctly predicted that they have Heart Disease 138.

#### No, Yes = False Positives (FP): We incorrectly predicted that they don't have Heart Disease (a "Type I error") 26 Falsely predict positive Type I error.

#### Yes, No = False Negatives (FN): We incorrectly predicted that they have Heart Disease (a "Type II error") 12 Falsely predict negative Type II error.

#**Training Set Score and Testing Set Score**
"""

print("Training Set Score : ",model.score(trainX,trainY).round(3))
print("Testing Set Score : ",model.score(testX,testY).round(3))

"""##**Wrong Predictions :**"""

wrongpred = 0
A = testY.to_numpy()
for i in range(len(Pred)):
    if (Pred[i] != A[i]):
        wrongpred += 1        
print("Number of wrong predictions : ",wrongpred)

"""#**Conclusion:**
In this Project we have imported heartdisease data csv file and imported it then filtered the dataset and shaped data for performing linear regression and then we built linear regression model and finally we have predicted the heart disease of a person whether he have the heart disease or not.If he have the heart disease prediction returns 1 if not it prediction returns 0 .
"""